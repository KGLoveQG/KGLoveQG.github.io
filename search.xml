<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>你好</title>
    <url>/2020/04/10/hello-world/</url>
    <content><![CDATA[<blockquote>
<p>欢迎来到英雄联，啊，不，我的blog，这里将是我的博客的起点，欢迎你常来～</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Git Pages + Hexo搭建个人博客记录</title>
    <url>/2020/04/10/hexo-init/</url>
    <content><![CDATA[<p>开发环境：Mac<br>感谢 <strong><a href="https://blog.csdn.net/muzilanlan/article/details/81542917" target="_blank" rel="noopener">muzilan</a></strong> 兄台的分享</p>
<a id="more"></a>

<h3 id="设置Git-Pages"><a href="#设置Git-Pages" class="headerlink" title="设置Git Pages"></a>设置Git Pages</h3><p> 创建一个新仓库，命名规则为 <strong>{*username*}.github.io</strong></p>
<p> 注意这里的 <strong>“*username*”</strong> 是 Github 的用户名</p>
<p> 创建成功后创建 <strong><em>index.html\</em></strong> 文件，内容随意</p>
<p> 之后使用浏览器打开pages页面查看是否创建成功</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p> <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo模版地址</a></p>
<p> <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p>
<p> <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题文档</a></p>
<p> Hexo 依赖 Node.js 环境，我这里已经安装过了便不再叙述。</p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p> 初始化 Hexo 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir hexofolder</span><br><span class="line">hexo init hexofolder</span><br><span class="line">cd hexofolder</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h4 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g # 生成模版</span><br><span class="line">hexo s # 启动本地服务 http://localhost:4000</span><br><span class="line">hexo d # 部署</span><br><span class="line">hexo new post [postname] # 创建指定名称的文章文件,md格式</span><br><span class="line">hexo new page [pagename] # 创建新的页面，eg：tags， categories</span><br><span class="line">hexo d -g # 生成部署</span><br><span class="line">hexo s -g # 生成预览</span><br></pre></td></tr></table></figure>

<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">cd hexofolder/themes</span><br><span class="line">git clone [theme地址] [themename] # 将theme模版以自定义name保存到本地</span><br></pre></td></tr></table></figure>

<h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd hexofolder/themes/[themename] # 进入主题目录</span><br><span class="line">git pull</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4 id="部署至-Git-Pages"><a href="#部署至-Git-Pages" class="headerlink" title="部署至 Git Pages"></a>部署至 Git Pages</h4><p> 安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p> 修改 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [Git Pages 地址]</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p> 在 Hexo 中执行部署命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>至此 模版部署完成</p>
<h3 id="Hexo-添加分类、标签"><a href="#Hexo-添加分类、标签" class="headerlink" title="Hexo 添加分类、标签"></a>Hexo 添加分类、标签</h3><h4 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>此时会在 <strong><em>source/categories\</em></strong> 下生成一个 <strong><em>index.md\</em></strong> 文件,对他进行编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-04-26 12:11:21</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><strong><em>comments\</em></strong> 为评论开关</p>
<p>修改 <strong><em>主题配置文件 _config.yml\</em></strong> ，将分类与标签的注释打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line"><span class="meta">  #</span><span class="bash">about: /about/ || fa fa-user</span></span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="meta">  #</span><span class="bash">schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>标签的设置方式同分类</p>
<h4 id="文章中添加标签和分类等"><a href="#文章中添加标签和分类等" class="headerlink" title="文章中添加标签和分类等"></a>文章中添加标签和分类等</h4><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new post [articlename]</span><br></pre></td></tr></table></figure>

<p>修改文章头部信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: [标题名称]</span><br><span class="line">catalog: true</span><br><span class="line">date: 2018-09-29 14:23:53</span><br><span class="line">subtitle: "[子标题]"</span><br><span class="line">header-img: "[imgpath]"</span><br><span class="line">tags:</span><br><span class="line">- [tag1]</span><br><span class="line">- [tag2]</span><br><span class="line">categories:</span><br><span class="line">- [categorie1]</span><br><span class="line">- [categorie2]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="装饰博客"><a href="#装饰博客" class="headerlink" title="装饰博客"></a>装饰博客</h3><h4 id="配置网站"><a href="#配置网站" class="headerlink" title="配置网站"></a>配置网站</h4><p>打开 <strong><em>站点配置文件 _config.yml\</em></strong>, 修改参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title: 王柯基的BLOG # 网站标题</span><br><span class="line">subtitle: ‘’ # 网站副标题</span><br><span class="line">description: ''</span><br><span class="line">keywords:</span><br><span class="line">author: 王柯基 # 您的名字</span><br><span class="line">language: zh-CN # 网站使用的语言。参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN</span><br><span class="line">timezone: ''</span><br></pre></td></tr></table></figure>

<h4 id="设置网站的图标Favicon-ico和头像"><a href="#设置网站的图标Favicon-ico和头像" class="headerlink" title="设置网站的图标Favicon.ico和头像"></a>设置网站的图标Favicon.ico和头像</h4><p>在 <strong>source</strong> 下创建文件夹 <strong>images</strong>， 将图片文件保存在 <strong>images</strong> 目录下，然后修改 <strong><em>主题配置文件 _config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon.ico # 这里修改要生效的图标</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line"><span class="meta">  #</span><span class="bash">android_manifest: /images/manifest.json</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">ms_browserconfig: /images/browserconfig.xml</span></span><br><span class="line">avatar:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Replace the default image and <span class="built_in">set</span> the url here.</span></span><br><span class="line">  url: /images/blog_head.png # 这里修改为要生效的头像</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be dispalyed <span class="keyword">in</span> circle.</span></span><br><span class="line">  rounded: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<h4 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h4><p>采用 <strong>Local Search</strong> 方式，添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <code>hexo-generator-searchdb</code> ，在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 末尾添加如下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中启用本地搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p><strong>不蒜子统计</strong></p>
<p>修改 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中 <strong><em>busuanzi_count\</em></strong> 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true # true 为启用状态</span><br><span class="line">  total_visitors: true # 统计访客数</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true # 统计访问量</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true # 统计阅读数</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>

<h3 id="利用Shell脚本按序号递增创建文章"><a href="#利用Shell脚本按序号递增创建文章" class="headerlink" title="利用Shell脚本按序号递增创建文章"></a>利用Shell脚本按序号递增创建文章</h3><p>创建shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim crt_hexo_article.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件名命名示例 article-1.md<span class="string">"</span></span></span><br><span class="line">NEW_FILE=`ls Hexo文章目录 | sed '/sh/d' | tail -n1`</span><br><span class="line">echo $NEW_FILE</span><br><span class="line">var=`echo $&#123;NEW_FILE&#125;|awk -F '-' '&#123;print $2&#125;'|awk -F '.' '&#123;print $1&#125;'`</span><br><span class="line">echo "max index now -&gt; $var"</span><br><span class="line">let var+=1</span><br><span class="line">echo "create article index -&gt; $var"</span><br><span class="line">hexo new post article-$&#123;var&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 typora 打开刚刚创建的md文件</span></span><br><span class="line">open -a typora Hexo文章路径</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>.bash_profile\</em></strong> 中添加别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell 脚本别名</span></span><br><span class="line">alias crtart="/bin/bash /Users/woo/crt_hexo_article.sh" </span><br><span class="line"><span class="meta">#</span><span class="bash"> typora 打开文件别名</span></span><br><span class="line">alias typora="open -a typora"</span><br></pre></td></tr></table></figure>

<p>保存退出后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>

<p>进入站点目录输入别名 <strong><em>crtart\</em></strong></p>
<h3 id="文章图片"><a href="#文章图片" class="headerlink" title="文章图片"></a>文章图片</h3><h3 id="Github-图床"><a href="#Github-图床" class="headerlink" title="Github 图床"></a>Github 图床</h3><p>在Github中新建了一个图床仓库，将图片push到仓库中，然后在文本中引用图片的地址就可以</p>
<h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><p>将图片保存至站点目录下的 <strong>source/images/[articlename]</strong> 中，然后在文本中引用如下链接：</p>
<p><strong><a href="http://onlygodsee.top/images/[articlename]/img.png" target="_blank" rel="noopener">http://onlygodsee.top/images/[articlename]/img.png</a></strong></p>
<h4 id="hexo-asset-image-插件"><a href="#hexo-asset-image-插件" class="headerlink" title="hexo-asset-image 插件"></a>hexo-asset-image 插件</h4><p>安装 hexo-asset-image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>修改 <strong><em>站点配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>之后每次new命令创建文章的时候就会生成同名的资源文件夹，部署的时候就会把资源文件同步上传到文章目录下</p>
<p>在发布文章时，先把我们要用到的图片放到文章目录下面的同名目录中</p>
<p>然后markdown中的图片链接直接填入图片名称即可</p>
<h4 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h4><p>想要让博文中的图片有放大预览功能需要借助插件 <strong>fancybox</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd theme/next/source/lib</span><br><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 fancybox</span><br></pre></td></tr></table></figure>

<p>修改 <strong><em>主题配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<p>重新部署后就可以看到效果了</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="部署后没有更新"><a href="#部署后没有更新" class="headerlink" title="部署后没有更新"></a>部署后没有更新</h4><p>解决方案：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/nzjdsds/article/details/81194116" target="_blank" rel="noopener">参考地址</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>react学习日记</title>
    <url>/2020/04/10/reactstu/</url>
    <content><![CDATA[<p>本项目为react实战训练项目，会不定期更新</p>
<h2 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h2><ol>
<li><p>安装nvm 管理node版本<br><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvw-windows的官网</a></p>
</li>
<li><p>安装完成之后检查是否成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm -v  <span class="comment"># 显示nvm的版本号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过nvm安装指定版本的node，这里安装的是8.9.0版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvm install 10.9.0</span><br><span class="line"><span class="comment"># 如果安装多个node版本，切换node版本</span></span><br><span class="line">nvm use [version]</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装cnpm</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发工具为visual studio code <a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">下载地址</a></p>
</li>
<li><p>安装webpack</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --global webpack</span><br><span class="line">npm install --global webpack-dev-server</span><br><span class="line">npm install --global bower</span><br></pre></td></tr></table></figure></li>
<li><p>以上环境和软件都安装完成后，打开项目在控制台中执行：<code>npm ci</code> 安装依赖，当一切准备就绪后 执行<code>npm start</code> 运行项目</p>
</li>
</ol>
<h2 id="git仓库操作"><a href="#git仓库操作" class="headerlink" title="git仓库操作"></a>git仓库操作</h2><p>注册码云关联github，导入github项目<br>打开.git/config文件，讲对应仓库地址写进去</p>
<p><a href="https://cloud.tencent.com/developer/article/1078192" target="_blank" rel="noopener">导入代码库参考</a>  </p>
<p><a href="https://www.cnblogs.com/zhengqing/p/11218529.html" target="_blank" rel="noopener">同步提交参考</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url &#x3D; githuburl</span><br><span class="line">	url &#x3D; gitteeurl</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h2><p><a href="https://www.cnblogs.com/dreamsqin/p/10885038.html" target="_blank" rel="noopener">参考</a><br>mongod –dbpath ~/data</p>
<h2 id="express安装"><a href="#express安装" class="headerlink" title="express安装"></a>express安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br><span class="line"><span class="comment"># 使用nodemon监听express更新，自动重启express</span></span><br><span class="line">npm install -g nodemon</span><br><span class="line"></span><br><span class="line"><span class="comment">#本项目中应当使用以下命令启动server</span></span><br><span class="line">nodemon .\server\server.js</span><br></pre></td></tr></table></figure>

<h2 id="安装mongoose操作MongoDB"><a href="#安装mongoose操作MongoDB" class="headerlink" title="安装mongoose操作MongoDB"></a>安装mongoose操作MongoDB</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure>

<h2 id="develop分支为开发分支"><a href="#develop分支为开发分支" class="headerlink" title="develop分支为开发分支"></a>develop分支为开发分支</h2><p>安装redux</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install redux --save</span><br></pre></td></tr></table></figure>

<h2 id="弹出配置文件，可以自定义配置webpack"><a href="#弹出配置文件，可以自定义配置webpack" class="headerlink" title="弹出配置文件，可以自定义配置webpack"></a>弹出配置文件，可以自定义配置webpack</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>Redux基础知识</title>
    <url>/2020/04/10/reduxstu/</url>
    <content><![CDATA[<h2 id="专注于状态管理的库"><a href="#专注于状态管理的库" class="headerlink" title="专注于状态管理的库"></a>专注于状态管理的库</h2><ul>
<li>Redux专注于状态管理，和react解耦</li>
<li>单一状态，单向数据流</li>
<li>核心概念：store，state，action，reducer</li>
</ul>
<h2 id="Redux的正确使用方法"><a href="#Redux的正确使用方法" class="headerlink" title="Redux的正确使用方法"></a>Redux的正确使用方法</h2><ul>
<li>首先通过<em>reducer</em>新建<em>store</em>，随时通过<em>store.getState</em>获取状态</li>
<li>需要状态变更，<em>store.dispatch(action)</em>来修改状态</li>
<li>Reducer函数接受<em>state</em>和<em>action</em>，返回新的<em>state</em>，可以用<em>store.subscribe</em>监听每次修改</li>
</ul>
<h2 id="Redux如何和React一起用"><a href="#Redux如何和React一起用" class="headerlink" title="Redux如何和React一起用"></a>Redux如何和React一起用</h2><ul>
<li>把<em>store.dispatch</em>方法传递给组件，内部可以调用修改状态</li>
<li>Subscribe订阅render函数，每次修改都重新渲染</li>
<li>Redux相关内容移到单独的<em>index.redux.js</em>单独管理</li>
</ul>
<h2 id="处理异步、调试工具、更优雅的和react结合"><a href="#处理异步、调试工具、更优雅的和react结合" class="headerlink" title="处理异步、调试工具、更优雅的和react结合"></a>处理异步、调试工具、更优雅的和react结合</h2><ul>
<li>Redux处理异步，需要<em>redux-thunk</em>插件</li>
<li>npm install redux-devtools-extension </li>
<li>使用react-redux优雅的连接react和redux</li>
</ul>
<h1 id="处理异步"><a href="#处理异步" class="headerlink" title="处理异步"></a>处理异步</h1><h2 id="Redux默认只处理同步，异步任务需要react-thunk中间件"><a href="#Redux默认只处理同步，异步任务需要react-thunk中间件" class="headerlink" title="Redux默认只处理同步，异步任务需要react-thunk中间件"></a>Redux默认只处理同步，异步任务需要react-thunk中间件</h2><ul>
<li>npm install redux-thunk –save</li>
<li>使用<em>applyMiddleware</em>开启thunk中间件</li>
<li>Action可以返回函数，使用dispatch提交action</li>
</ul>
<h1 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h1><h2 id="Chrome搜索redux安装"><a href="#Chrome搜索redux安装" class="headerlink" title="Chrome搜索redux安装"></a>Chrome搜索redux安装</h2><ul>
<li>新建<em>store<em>的时候判断</em>window.devToolsExtension</em></li>
<li>使用<em>compose<em>结合</em>thunk<em>和</em>window.devToolsExtension</em></li>
<li>调试窗的redux选项卡，实时看到<em>state</em></li>
</ul>
<h2 id="使用react-redux"><a href="#使用react-redux" class="headerlink" title="使用react-redux"></a>使用react-redux</h2><ul>
<li>npm install react-redux –save</li>
<li>忘记subscribe，记住reducer，action和dispatch即可</li>
<li>React-redux提供<em>Provider</em>和<em>connect</em>两个接口</li>
</ul>
<h2 id="React-redux具体使用"><a href="#React-redux具体使用" class="headerlink" title="React-redux具体使用"></a>React-redux具体使用</h2><ul>
<li>Provider组件在应用最外层，传入store即可，只用一次 </li>
<li>Connect负责从外部获取组件需要的参数</li>
<li>Connect可以用装饰器的方式来写</li>
</ul>
<h2 id="使用装饰器优化connect代码"><a href="#使用装饰器优化connect代码" class="headerlink" title="使用装饰器优化connect代码"></a>使用装饰器优化connect代码</h2><ul>
<li>npm run eject弹出个性化配置</li>
<li>npm install babel-plugin-transform-decorators-legcy插件</li>
<li>package.json里加上plugins配置</li>
</ul>
]]></content>
  </entry>
</search>
